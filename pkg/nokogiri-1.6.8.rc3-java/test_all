#! /usr/bin/env bash
#
#  script to run tests on all relevant rubies, and valgrind on supported rubies.
#  outputs tests to `test.log` and valgrind output to `valgrind.log`.
#
#  requires `rvm` to be installed. sorry about that, multiruby dudes.
#
#  it's worth periodically using hoe-debugger's ability to generate
#  valgrind suppression files to remove spurious valgrind messages
#  (e.g., 1.9.3's glob_helper). ["rake test:valgrind:suppression"]
#

# I'd add rubinius, but rvm errors when building it on my machine. :(
RUBIES="\
  ruby-2.3 \
  ruby-2.2 \
  ruby-2.1 \
  ruby-2.0.0-p648 \
  ruby-1.9.3-p551 \
  ruby-1.9.2-p330 \
  jruby-9.0.4.0 \
  jruby-1.7.19
  "

TEST_LOG=test.log
VALGRIND_LOG=valgrind.log

if ! grep libxml-ruby Gemfile ; then
  echo "ERROR: please add this line your Gemfile temporarily so we can run libxml-ruby tests:"
  echo
  echo "gem 'libxml-ruby', :platform => :mri"
  echo
  exit 1
fi

# Load RVM into a shell session *as a function*
if [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then
    source "$HOME/.rvm/scripts/rvm"
elif [[ -s "/usr/local/rvm/scripts/rvm" ]] ; then
    source "/usr/local/rvm/scripts/rvm"
else
    echo "ERROR: An RVM installation was not found.\n"
fi

> $TEST_LOG
> $VALGRIND_LOG
set -o errexit

function rvm_use {
    current_ruby=$1
    rvm use "${1}@nokogiri" --create
}

function generate_parser_and_tokenizer {
    old_ruby=$current_ruby
    rvm_use ruby-1.9.3
    bundle exec rake generate 2>&1 > /dev/null
    rvm_use $old_ruby
}

function clean {
    bundle exec rake clean clobber 2>&1 > /dev/null
}

function compile {
    echo "** compiling ..."
    # generate_parser_and_tokenizer
    bundle exec rake compile 2>&1 > /dev/null
}

# quick check that we have All The Rubies
for ruby in $RUBIES ; do
  rvm_use ${ruby}
done

for ruby in $RUBIES ; do
  rvm_use ${ruby}
  if ! [[ $(bundle -v) =~ "1.10." ]] ; then
    yes | gem uninstall --force bundler
    gem install bundler -v 1.10.6
    bundle -v
  fi
  bundle install --quiet --local || bundle install
  clean
done

for ruby in $RUBIES ; do
    rvm_use ${ruby}
    echo -e "**\n** testing nokogiri on ${ruby}\n**" | tee -a $TEST_LOG
    clean
    compile
    echo "** running tests ..."
    bundle exec rake test 2>&1 | tee -a $TEST_LOG
    if [[ ! $ruby =~ "jruby" ]] ; then
      echo "** running tests again with libxml-ruby loaded ..."
      if ! gem list libxml-ruby | fgrep 2.8.0 ; then
        gem install libxml-ruby
      fi
      bundle exec rake test:libxml-ruby 2>&1 | tee -a $TEST_LOG
    fi
    clean
done

for ruby in $RUBIES ; do
    if [[ ! $ruby =~ "jruby" ]] ; then
        rvm_use ${ruby}
        echo -e "**\n** nokogiri prerelease: ${ruby}\n**" | tee -a $VALGRIND_LOG
        clean
        compile
        echo "** running valgrind on tests ..."
        bundle exec rake test:valgrind 2>&1 | tee -a $VALGRIND_LOG
        echo "** running valgrind again with libxml-ruby loaded ..."
        bundle exec rake test:valgrind:libxml-ruby 2>&1 | tee -a $VALGRIND_LOG
        clean
    fi
done
