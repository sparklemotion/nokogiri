#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'nokogiri/css/parser_extras'
module Nokogiri
  module CSS
    class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    21,     4,     5,     7,    29,     4,     5,     7,    30,    19,
   -26,     6,    21,     9,     8,     6,    29,     9,     8,    22,
    31,    19,    20,    21,    23,    15,    17,    29,    24,    83,
    31,    22,    19,    84,    20,    21,    23,    15,    17,    29,
    24,    92,    22,    85,    19,    20,    21,    23,    15,    17,
    20,    24,    82,    90,    22,    59,    24,    20,    89,    23,
    15,    17,    21,    24,    88,    22,    29,     4,     5,     7,
    23,    19,    71,    29,    91,    29,    86,     6,    19,     9,
     8,    22,    29,    29,    20,    89,    23,    15,    17,    35,
    24,    20,    29,    20,    15,    17,    15,    24,    35,    24,
    20,    20,    29,    15,    15,    93,    24,    24,    21,    64,
    20,    95,    29,    15,    97,    96,    24,    43,   -26,    46,
    20,    52,    53,    15,    51,    98,    24,    22,    79,    80,
    20,    99,    23,    15,    48,    42,    24,    79,    80,    75,
    76,    77,   101,    78,    87,    86,    41,    74,    75,    76,
    77,    35,    78,   104,    52,    56,    74,    55,    52,    56,
   105,    55,    52,    56,   nil,    55,    52,    56,   nil,    55 ]

racc_action_check = [
     0,    14,    14,    14,     0,     0,     0,     0,     1,     0,
    43,    14,    40,    14,    14,     0,    40,     0,     0,     0,
     1,    40,     0,    31,     0,     0,     0,    31,     0,    47,
    57,    40,    31,    49,    40,    13,    40,    40,    40,    13,
    40,    57,    31,    50,    13,    31,    24,    31,    31,    31,
    11,    31,    46,    53,    13,    24,    11,    13,    53,    13,
    13,    13,    23,    13,    52,    24,    23,    23,    23,    23,
    24,    23,    42,    35,    54,    28,    55,    23,    35,    23,
    23,    23,    27,    10,    23,    56,    23,    23,    23,    33,
    23,    35,    26,    28,    35,    35,    28,    35,    10,    28,
    27,    10,    25,    27,    10,    67,    27,    10,    20,    30,
    26,    72,    68,    26,    73,    73,    26,    20,    19,    20,
    25,    21,    21,    25,    21,    81,    25,    20,    45,    45,
    68,    83,    20,    68,    21,    18,    68,    44,    44,    45,
    45,    45,    87,    45,    51,    51,    15,    45,    44,    44,
    44,    12,    44,    90,    89,    89,    44,    89,    86,    86,
   101,    86,    88,    88,   nil,    88,    22,    22,   nil,    22 ]

racc_action_pointer = [
    -2,     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    77,    26,   130,    33,    -6,   135,   nil,   nil,   106,    89,
   106,   111,   156,    60,    44,    96,    86,    76,    69,   nil,
   109,    21,   nil,    68,   nil,    67,   nil,   nil,   nil,   nil,
    10,   nil,    61,   -19,   134,   125,    27,     0,   nil,    10,
    20,   133,    52,    46,    51,    64,    73,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    82,   106,   nil,
   nil,   nil,    86,   104,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   100,   nil,   120,   nil,   nil,   148,   135,   152,   144,
   140,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   147,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -27,   -74,    -2,    -3,    -4,    -5,    -6,    -7,    -8,    -9,
   -50,   -13,   -17,   -27,   -20,   -74,   -22,   -23,   -74,   -25,
   -27,   -74,   -74,   -27,   -74,   -55,   -56,   -57,   -58,   -59,
   -74,   -27,   -10,   -49,   -12,   -27,   -14,   -15,   -16,   -18,
   -27,   -21,   -74,   -32,   -62,   -62,   -74,   -74,   -33,   -74,
   -74,   -41,   -42,   -43,   -74,   -41,   -43,   -74,   -47,   -48,
   -51,   -52,   -53,   -54,   106,    -1,   -11,   -74,   -71,   -73,
   -19,   -24,   -74,   -74,   -63,   -64,   -65,   -66,   -67,   -68,
   -69,   -74,   -30,   -74,   -34,   -35,   -74,   -46,   -74,   -74,
   -74,   -36,   -37,   -70,   -72,   -28,   -60,   -61,   -29,   -31,
   -38,   -74,   -39,   -40,   -45,   -44 ]

racc_goto_table = [
    49,    54,    33,    39,    36,     1,    34,    45,    38,    72,
    81,    58,    32,    37,    47,    44,    68,    60,    61,    62,
    63,    65,    40,    50,    67,   nil,   nil,    69,    57,    66,
    70,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    94,   nil,   nil,   nil,   nil,   100,   nil,   102,   103 ]

racc_goto_check = [
    18,    18,     8,     2,    11,     1,     9,    10,     9,    17,
    17,    10,     7,    12,    15,    16,     6,     8,     8,     8,
     8,     2,     4,    19,    22,   nil,   nil,     8,     1,     9,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     8,   nil,   nil,   nil,   nil,    18,   nil,    18,    18 ]

racc_goto_pointer = [
   nil,     5,   -10,   nil,     8,   nil,   -19,     2,    -8,    -4,
   -13,    -7,     2,   nil,   nil,    -6,    -5,   -35,   -21,     2,
   nil,   nil,   -11 ]

racc_goto_default = [
   nil,   nil,     3,     2,    13,    14,    10,   nil,    12,   nil,
    11,    28,    27,    26,    16,    18,   nil,   nil,   nil,   nil,
    25,    73,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 32, :_reduce_1,
  1, 32, :_reduce_2,
  1, 32, :_reduce_3,
  1, 35, :_reduce_4,
  1, 35, :_reduce_5,
  1, 35, :_reduce_6,
  1, 35, :_reduce_7,
  1, 35, :_reduce_8,
  1, 35, :_reduce_9,
  2, 36, :_reduce_10,
  3, 36, :_reduce_11,
  2, 36, :_reduce_12,
  1, 36, :_reduce_none,
  2, 36, :_reduce_14,
  2, 36, :_reduce_15,
  2, 36, :_reduce_16,
  1, 36, :_reduce_17,
  2, 34, :_reduce_18,
  3, 33, :_reduce_19,
  1, 33, :_reduce_none,
  2, 44, :_reduce_21,
  1, 37, :_reduce_none,
  1, 37, :_reduce_23,
  3, 45, :_reduce_24,
  1, 45, :_reduce_25,
  1, 46, :_reduce_26,
  0, 46, :_reduce_none,
  4, 43, :_reduce_28,
  4, 43, :_reduce_29,
  3, 43, :_reduce_30,
  3, 47, :_reduce_31,
  1, 47, :_reduce_32,
  2, 41, :_reduce_33,
  3, 41, :_reduce_34,
  3, 41, :_reduce_35,
  3, 41, :_reduce_36,
  3, 41, :_reduce_37,
  3, 49, :_reduce_38,
  3, 49, :_reduce_39,
  3, 49, :_reduce_40,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_43,
  4, 50, :_reduce_44,
  3, 50, :_reduce_45,
  2, 50, :_reduce_46,
  2, 42, :_reduce_47,
  2, 42, :_reduce_48,
  1, 38, :_reduce_none,
  0, 38, :_reduce_none,
  2, 39, :_reduce_51,
  2, 39, :_reduce_52,
  2, 39, :_reduce_53,
  2, 39, :_reduce_54,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 51, :_reduce_59,
  2, 48, :_reduce_60,
  2, 48, :_reduce_61,
  0, 48, :_reduce_none,
  1, 52, :_reduce_63,
  1, 52, :_reduce_64,
  1, 52, :_reduce_65,
  1, 52, :_reduce_66,
  1, 52, :_reduce_67,
  1, 52, :_reduce_68,
  1, 52, :_reduce_69,
  3, 40, :_reduce_70,
  1, 53, :_reduce_none,
  2, 53, :_reduce_none,
  1, 53, :_reduce_none ]

racc_reduce_n = 74

racc_shift_n = 106

racc_token_table = {
  false => 0,
  :error => 1,
  :FUNCTION => 2,
  :INCLUDES => 3,
  :DASHMATCH => 4,
  :LBRACE => 5,
  :HASH => 6,
  :PLUS => 7,
  :GREATER => 8,
  :S => 9,
  :STRING => 10,
  :IDENT => 11,
  :COMMA => 12,
  :NUMBER => 13,
  :PREFIXMATCH => 14,
  :SUFFIXMATCH => 15,
  :SUBSTRINGMATCH => 16,
  :TILDE => 17,
  :NOT_EQUAL => 18,
  :SLASH => 19,
  :DOUBLESLASH => 20,
  :NOT => 21,
  :EQUAL => 22,
  :RPAREN => 23,
  :LSQUARE => 24,
  :RSQUARE => 25,
  :HAS => 26,
  "." => 27,
  "*" => 28,
  "|" => 29,
  ":" => 30 }

racc_nt_base = 31

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "FUNCTION",
  "INCLUDES",
  "DASHMATCH",
  "LBRACE",
  "HASH",
  "PLUS",
  "GREATER",
  "S",
  "STRING",
  "IDENT",
  "COMMA",
  "NUMBER",
  "PREFIXMATCH",
  "SUFFIXMATCH",
  "SUBSTRINGMATCH",
  "TILDE",
  "NOT_EQUAL",
  "SLASH",
  "DOUBLESLASH",
  "NOT",
  "EQUAL",
  "RPAREN",
  "LSQUARE",
  "RSQUARE",
  "HAS",
  "\".\"",
  "\"*\"",
  "\"|\"",
  "\":\"",
  "$start",
  "selector",
  "simple_selector_1toN",
  "prefixless_combinator_selector",
  "combinator",
  "simple_selector",
  "element_name",
  "hcap_0toN",
  "hcap_1toN",
  "negation",
  "function",
  "pseudo",
  "attrib",
  "class",
  "namespaced_ident",
  "namespace",
  "attrib_name",
  "attrib_val_0or1",
  "expr",
  "nth",
  "attribute_id",
  "eql_incl_dash",
  "negation_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
        result = [val.first, val.last].flatten
      
    result
end

def _reduce_2(val, _values, result)
 result = val.flatten 
    result
end

def _reduce_3(val, _values, result)
 result = val.flatten 
    result
end

def _reduce_4(val, _values, result)
 result = :DIRECT_ADJACENT_SELECTOR 
    result
end

def _reduce_5(val, _values, result)
 result = :CHILD_SELECTOR 
    result
end

def _reduce_6(val, _values, result)
 result = :FOLLOWING_SELECTOR 
    result
end

def _reduce_7(val, _values, result)
 result = :DESCENDANT_SELECTOR 
    result
end

def _reduce_8(val, _values, result)
 result = :DESCENDANT_SELECTOR 
    result
end

def _reduce_9(val, _values, result)
 result = :CHILD_SELECTOR 
    result
end

def _reduce_10(val, _values, result)
        result =  if val[1].nil?
                    val.first
                  else
                    Node.new(:CONDITIONAL_SELECTOR, [val.first, val[1]])
                  end
      
    result
end

def _reduce_11(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [
            val.first,
            Node.new(:COMBINATOR, [val[1], val.last])
          ]
        )
      
    result
end

def _reduce_12(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR, val)
      
    result
end

# reduce 13 omitted

def _reduce_14(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR, val)
      
    result
end

def _reduce_15(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR, val)
      
    result
end

def _reduce_16(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [
            Node.new(:ELEMENT_NAME, ['*']),
            Node.new(:COMBINATOR, val)
          ]
        )
      
    result
end

def _reduce_17(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [Node.new(:ELEMENT_NAME, ['*']), val.first]
        )
      
    result
end

def _reduce_18(val, _values, result)
        result = Node.new(val.first, [nil, val.last])
      
    result
end

def _reduce_19(val, _values, result)
        result = Node.new(val[1], [val.first, val.last])
      
    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
 result = Node.new(:CLASS_CONDITION, [val[1]]) 
    result
end

# reduce 22 omitted

def _reduce_23(val, _values, result)
 result = Node.new(:ELEMENT_NAME, val) 
    result
end

def _reduce_24(val, _values, result)
        result = Node.new(:ELEMENT_NAME,
          [[val.first, val.last].compact.join(':')]
        )
      
    result
end

def _reduce_25(val, _values, result)
        name = @namespaces.key?('xmlns') ? "xmlns:#{val.first}" : val.first
        result = Node.new(:ELEMENT_NAME, [name])
      
    result
end

def _reduce_26(val, _values, result)
 result = val[0] 
    result
end

# reduce 27 omitted

def _reduce_28(val, _values, result)
        result = Node.new(:ATTRIBUTE_CONDITION,
          [val[1]] + (val[2] || [])
        )
      
    result
end

def _reduce_29(val, _values, result)
        result = Node.new(:ATTRIBUTE_CONDITION,
          [val[1]] + (val[2] || [])
        )
      
    result
end

def _reduce_30(val, _values, result)
        # Non standard, but hpricot supports it.
        result = Node.new(:PSEUDO_CLASS,
          [Node.new(:FUNCTION, ['nth-child(', val[1]])]
        )
      
    result
end

def _reduce_31(val, _values, result)
        result = Node.new(:ELEMENT_NAME,
          [[val.first, val.last].compact.join(':')]
        )
      
    result
end

def _reduce_32(val, _values, result)
        # Default namespace is not applied to attributes.
        # So we don't add prefix "xmlns:" as in namespaced_ident.
        result = Node.new(:ELEMENT_NAME, [val.first])
      
    result
end

def _reduce_33(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip])
      
    result
end

def _reduce_34(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_35(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_36(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_37(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_38(val, _values, result)
 result = [val.first, val.last] 
    result
end

def _reduce_39(val, _values, result)
 result = [val.first, val.last] 
    result
end

def _reduce_40(val, _values, result)
 result = [val.first, val.last] 
    result
end

# reduce 41 omitted

# reduce 42 omitted

def _reduce_43(val, _values, result)
        if val[0] == 'even'
          val = ["2","n","+","0"]
          result = Node.new(:NTH, val)
        elsif val[0] == 'odd'
          val = ["2","n","+","1"]
          result = Node.new(:NTH, val)
        else
          # This is not CSS standard.  It allows us to support this:
          # assert_xpath("//a[foo(., @href)]", @parser.parse('a:foo(@href)'))
          # assert_xpath("//a[foo(., @a, b)]", @parser.parse('a:foo(@a, b)'))
          # assert_xpath("//a[foo(., a, 10)]", @parser.parse('a:foo(a, 10)'))
          result = val
        end
      
    result
end

def _reduce_44(val, _values, result)
        if val[1] == 'n'
          result = Node.new(:NTH, val)
        else
          raise Racc::ParseError, "parse error on IDENT '#{val[1]}'"
        end
      
    result
end

def _reduce_45(val, _values, result)
               # n+3, -n+3
        if val[0] == 'n'
          val.unshift("1")
          result = Node.new(:NTH, val)
        elsif val[0] == '-n'
          val[0] = 'n'
          val.unshift("-1")
          result = Node.new(:NTH, val)
        else
          raise Racc::ParseError, "parse error on IDENT '#{val[1]}'"
        end
      
    result
end

def _reduce_46(val, _values, result)
                    # 5n, -5n, 10n-1
        n = val[1]
        if n[0, 2] == 'n-'
          val[1] = 'n'
          val << "-"
          # b is contained in n as n is the string "n-b"
          val << n[2, n.size]
          result = Node.new(:NTH, val)
        elsif n == 'n'
          val << "+"
          val << "0"
          result = Node.new(:NTH, val)
        else
          raise Racc::ParseError, "parse error on IDENT '#{val[1]}'"
        end
      
    result
end

def _reduce_47(val, _values, result)
        result = Node.new(:PSEUDO_CLASS, [val[1]])
      
    result
end

def _reduce_48(val, _values, result)
 result = Node.new(:PSEUDO_CLASS, [val[1]]) 
    result
end

# reduce 49 omitted

# reduce 50 omitted

def _reduce_51(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

def _reduce_52(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

def _reduce_53(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

def _reduce_54(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

def _reduce_59(val, _values, result)
 result = Node.new(:ID, val) 
    result
end

def _reduce_60(val, _values, result)
 result = [val.first, val[1]] 
    result
end

def _reduce_61(val, _values, result)
 result = [val.first, val[1]] 
    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
 result = :equal 
    result
end

def _reduce_64(val, _values, result)
 result = :prefix_match 
    result
end

def _reduce_65(val, _values, result)
 result = :suffix_match 
    result
end

def _reduce_66(val, _values, result)
 result = :substring_match 
    result
end

def _reduce_67(val, _values, result)
 result = :not_equal 
    result
end

def _reduce_68(val, _values, result)
 result = :includes 
    result
end

def _reduce_69(val, _values, result)
 result = :dash_match 
    result
end

def _reduce_70(val, _values, result)
        result = Node.new(:NOT, [val[1]])
      
    result
end

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module CSS
  end   # module Nokogiri
