#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'nokogiri/css/parser_extras'
module Nokogiri
  module CSS
    class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    22,    31,    21,    32,    30,     4,     5,     7,    25,    20,
    89,    22,    92,    32,    97,     6,    93,     9,     8,    23,
    64,    92,    21,    87,    24,    16,    18,    22,    25,   -27,
    49,    30,     4,     5,     7,    24,    20,    54,    86,    22,
    58,    88,     6,    30,     9,     8,    23,    85,    20,    21,
    22,    24,    16,    18,    30,    25,   100,    99,    23,    20,
    91,    21,    22,    24,    16,    18,    30,    25,    36,    23,
    43,    20,    21,    30,    24,    16,    18,    30,    25,    54,
    55,    23,    53,    94,    21,    30,    24,    16,    18,    30,
    25,    21,    50,    73,    16,    21,    95,    25,    16,    30,
    36,    25,    69,    21,    20,   -27,    16,    21,    30,    25,
    16,    54,    86,    25,    58,    30,    98,    21,    90,    89,
    16,    18,    84,    25,    54,    86,    21,    58,   101,    16,
    30,    22,    25,    21,    54,    56,    16,    58,   102,    25,
    44,    92,    47,    42,   104,    81,    82,    36,    21,   -27,
    49,    16,    18,   107,    25,    24,    77,    78,    79,   108,
    80,    81,    82,   nil,    76,     4,     5,     7,    54,    86,
   nil,    58,    77,    78,    79,     6,    80,     9,     8,   nil,
    76 ]

racc_action_check = [
     0,     1,    11,    62,     0,     0,     0,     0,    11,     0,
    58,    25,    56,     1,    62,     0,    55,     0,     0,     0,
    25,    55,     0,    51,     0,     0,     0,    24,     0,    56,
    25,    24,    24,    24,    24,    25,    24,    49,    49,    14,
    49,    52,    24,    14,    24,    24,    24,    48,    14,    24,
    41,    24,    24,    24,    41,    24,    75,    75,    14,    41,
    54,    14,    32,    14,    14,    14,    32,    14,    34,    41,
    19,    32,    41,    27,    41,    41,    41,    26,    41,    22,
    22,    32,    22,    57,    32,    10,    32,    32,    32,    29,
    32,    27,    22,    43,    27,    26,    59,    27,    26,    36,
    10,    26,    31,    10,    36,    20,    10,    29,    28,    10,
    29,    92,    92,    29,    92,    60,    74,    36,    53,    53,
    36,    36,    47,    36,    91,    91,    28,    91,    83,    28,
    23,    21,    28,    60,    23,    23,    60,    23,    85,    60,
    21,    86,    21,    16,    90,    46,    46,    12,    23,    44,
    21,    23,    23,    93,    23,    21,    46,    46,    46,   104,
    46,    45,    45,   nil,    46,    15,    15,    15,    89,    89,
   nil,    89,    45,    45,    45,    15,    45,    15,    15,   nil,
    45 ]

racc_action_pointer = [
    -2,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    79,   -22,   126,   nil,    37,   158,   132,   nil,   nil,    41,
    76,   129,    69,   124,    25,     9,    71,    67,   102,    83,
   nil,   102,    60,   nil,    47,   nil,    93,   nil,   nil,   nil,
   nil,    48,   nil,    82,   120,   158,   142,    97,    18,    27,
   nil,     0,    18,   107,    48,     9,     0,    60,    -2,    73,
   109,   nil,    -9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    91,    46,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   103,   nil,   127,   129,   nil,   nil,   158,
   137,   114,   101,   140,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   146,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -28,   -75,    -2,    -3,    -4,    -5,    -6,    -7,    -8,    -9,
   -51,   -13,   -17,   -18,   -28,   -21,   -75,   -23,   -24,   -75,
   -26,   -28,   -75,   -28,   -28,   -75,   -56,   -57,   -58,   -59,
   -60,   -75,   -28,   -10,   -50,   -12,   -28,   -14,   -15,   -16,
   -19,   -28,   -22,   -75,   -33,   -63,   -63,   -75,   -75,   -75,
   -34,   -75,   -75,   -42,   -43,   -44,   -26,   -75,   -42,   -75,
   -72,   -74,   -75,   -48,   -49,   -52,   -53,   -54,   -55,   109,
    -1,   -11,   -20,   -25,   -75,   -75,   -64,   -65,   -66,   -67,
   -68,   -69,   -70,   -75,   -31,   -75,   -44,   -35,   -36,   -75,
   -47,   -75,   -75,   -75,   -37,   -71,   -73,   -38,   -29,   -61,
   -62,   -30,   -32,   -39,   -75,   -40,   -41,   -46,   -45 ]

racc_goto_table = [
    51,    34,    35,    40,    39,     1,    46,    74,    83,    60,
    63,    45,    38,    48,    61,    37,    33,    65,    66,    67,
    68,    70,    60,    41,    52,   nil,    71,    61,   nil,    62,
    72,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    96,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   103,   nil,   105,
   106 ]

racc_goto_check = [
    18,     8,     9,     2,     9,     1,    10,    17,    17,     6,
    10,    16,    12,    15,     8,    11,     7,     8,     8,     8,
     8,     2,     6,     4,    19,   nil,     9,     8,   nil,     1,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,    18,
    18 ]

racc_goto_pointer = [
   nil,     5,   -11,   nil,     8,   nil,   -14,     6,    -9,    -8,
   -15,     4,     1,   nil,   nil,    -8,   -10,   -38,   -22,     2,
   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,     3,     2,    14,    15,    10,   nil,    12,    13,
    11,    29,    28,    27,    17,    19,   nil,   nil,    57,   nil,
    26,    75,    59 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 32, :_reduce_1,
  1, 32, :_reduce_2,
  1, 32, :_reduce_3,
  1, 35, :_reduce_4,
  1, 35, :_reduce_5,
  1, 35, :_reduce_6,
  1, 35, :_reduce_7,
  1, 35, :_reduce_8,
  1, 35, :_reduce_9,
  2, 36, :_reduce_10,
  3, 36, :_reduce_11,
  2, 36, :_reduce_12,
  1, 36, :_reduce_none,
  2, 36, :_reduce_14,
  2, 36, :_reduce_15,
  2, 36, :_reduce_16,
  1, 36, :_reduce_17,
  1, 36, :_reduce_18,
  2, 34, :_reduce_19,
  3, 33, :_reduce_20,
  1, 33, :_reduce_none,
  2, 44, :_reduce_22,
  1, 37, :_reduce_none,
  1, 37, :_reduce_24,
  3, 45, :_reduce_25,
  1, 45, :_reduce_26,
  1, 46, :_reduce_27,
  0, 46, :_reduce_none,
  4, 43, :_reduce_29,
  4, 43, :_reduce_30,
  3, 43, :_reduce_31,
  3, 47, :_reduce_32,
  1, 47, :_reduce_33,
  2, 41, :_reduce_34,
  3, 41, :_reduce_35,
  3, 41, :_reduce_36,
  3, 41, :_reduce_37,
  3, 41, :_reduce_38,
  3, 49, :_reduce_39,
  3, 49, :_reduce_40,
  3, 49, :_reduce_41,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_44,
  4, 50, :_reduce_45,
  3, 50, :_reduce_46,
  2, 50, :_reduce_47,
  2, 42, :_reduce_48,
  2, 42, :_reduce_49,
  1, 38, :_reduce_none,
  0, 38, :_reduce_none,
  2, 39, :_reduce_52,
  2, 39, :_reduce_53,
  2, 39, :_reduce_54,
  2, 39, :_reduce_55,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 51, :_reduce_60,
  2, 48, :_reduce_61,
  2, 48, :_reduce_62,
  0, 48, :_reduce_none,
  1, 52, :_reduce_64,
  1, 52, :_reduce_65,
  1, 52, :_reduce_66,
  1, 52, :_reduce_67,
  1, 52, :_reduce_68,
  1, 52, :_reduce_69,
  1, 52, :_reduce_70,
  3, 40, :_reduce_71,
  1, 53, :_reduce_none,
  2, 53, :_reduce_none,
  1, 53, :_reduce_none ]

racc_reduce_n = 75

racc_shift_n = 109

racc_token_table = {
  false => 0,
  :error => 1,
  :FUNCTION => 2,
  :INCLUDES => 3,
  :DASHMATCH => 4,
  :LBRACE => 5,
  :HASH => 6,
  :PLUS => 7,
  :GREATER => 8,
  :S => 9,
  :STRING => 10,
  :IDENT => 11,
  :COMMA => 12,
  :NUMBER => 13,
  :PREFIXMATCH => 14,
  :SUFFIXMATCH => 15,
  :SUBSTRINGMATCH => 16,
  :TILDE => 17,
  :NOT_EQUAL => 18,
  :SLASH => 19,
  :DOUBLESLASH => 20,
  :NOT => 21,
  :EQUAL => 22,
  :RPAREN => 23,
  :LSQUARE => 24,
  :RSQUARE => 25,
  :HAS => 26,
  "." => 27,
  "*" => 28,
  "|" => 29,
  ":" => 30 }

racc_nt_base = 31

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "FUNCTION",
  "INCLUDES",
  "DASHMATCH",
  "LBRACE",
  "HASH",
  "PLUS",
  "GREATER",
  "S",
  "STRING",
  "IDENT",
  "COMMA",
  "NUMBER",
  "PREFIXMATCH",
  "SUFFIXMATCH",
  "SUBSTRINGMATCH",
  "TILDE",
  "NOT_EQUAL",
  "SLASH",
  "DOUBLESLASH",
  "NOT",
  "EQUAL",
  "RPAREN",
  "LSQUARE",
  "RSQUARE",
  "HAS",
  "\".\"",
  "\"*\"",
  "\"|\"",
  "\":\"",
  "$start",
  "selector",
  "simple_selector_1toN",
  "prefixless_combinator_selector",
  "combinator",
  "simple_selector",
  "element_name",
  "hcap_0toN",
  "hcap_1toN",
  "negation",
  "function",
  "pseudo",
  "attrib",
  "class",
  "namespaced_ident",
  "namespace",
  "attrib_name",
  "attrib_val_0or1",
  "expr",
  "an_plus_b",
  "attribute_id",
  "eql_incl_dash",
  "negation_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
        result = [val.first, val.last].flatten
      
    result
end

def _reduce_2(val, _values, result)
 result = val.flatten 
    result
end

def _reduce_3(val, _values, result)
 result = val.flatten 
    result
end

def _reduce_4(val, _values, result)
 result = :DIRECT_ADJACENT_SELECTOR 
    result
end

def _reduce_5(val, _values, result)
 result = :CHILD_SELECTOR 
    result
end

def _reduce_6(val, _values, result)
 result = :FOLLOWING_SELECTOR 
    result
end

def _reduce_7(val, _values, result)
 result = :DESCENDANT_SELECTOR 
    result
end

def _reduce_8(val, _values, result)
 result = :DESCENDANT_SELECTOR 
    result
end

def _reduce_9(val, _values, result)
 result = :CHILD_SELECTOR 
    result
end

def _reduce_10(val, _values, result)
        result =  if val[1].nil?
                    val.first
                  else
                    Node.new(:CONDITIONAL_SELECTOR, [val.first, val[1]])
                  end
      
    result
end

def _reduce_11(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [
            val.first,
            Node.new(:COMBINATOR, [val[1], val.last])
          ]
        )
      
    result
end

def _reduce_12(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR, val)
      
    result
end

# reduce 13 omitted

def _reduce_14(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR, val)
      
    result
end

def _reduce_15(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR, val)
      
    result
end

def _reduce_16(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [
            Node.new(:ELEMENT_NAME, ['*']),
            Node.new(:COMBINATOR, val)
          ]
        )
      
    result
end

def _reduce_17(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [Node.new(:ELEMENT_NAME, ['*']), val.first]
        )
      
    result
end

def _reduce_18(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [Node.new(:ELEMENT_NAME, ['*']), val.first]
        )
      
    result
end

def _reduce_19(val, _values, result)
        result = Node.new(val.first, [nil, val.last])
      
    result
end

def _reduce_20(val, _values, result)
        result = Node.new(val[1], [val.first, val.last])
      
    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
 result = Node.new(:CLASS_CONDITION, [val[1]]) 
    result
end

# reduce 23 omitted

def _reduce_24(val, _values, result)
 result = Node.new(:ELEMENT_NAME, val) 
    result
end

def _reduce_25(val, _values, result)
        result = Node.new(:ELEMENT_NAME,
          [[val.first, val.last].compact.join(':')]
        )
      
    result
end

def _reduce_26(val, _values, result)
        name = @namespaces.key?('xmlns') ? "xmlns:#{val.first}" : val.first
        result = Node.new(:ELEMENT_NAME, [name])
      
    result
end

def _reduce_27(val, _values, result)
 result = val[0] 
    result
end

# reduce 28 omitted

def _reduce_29(val, _values, result)
        result = Node.new(:ATTRIBUTE_CONDITION,
          [val[1]] + (val[2] || [])
        )
      
    result
end

def _reduce_30(val, _values, result)
        result = Node.new(:ATTRIBUTE_CONDITION,
          [val[1]] + (val[2] || [])
        )
      
    result
end

def _reduce_31(val, _values, result)
        # Non standard, but hpricot supports it.
        result = Node.new(:PSEUDO_CLASS,
          [Node.new(:FUNCTION, ['nth-child(', val[1]])]
        )
      
    result
end

def _reduce_32(val, _values, result)
        result = Node.new(:ELEMENT_NAME,
          [[val.first, val.last].compact.join(':')]
        )
      
    result
end

def _reduce_33(val, _values, result)
        # Default namespace is not applied to attributes.
        # So we don't add prefix "xmlns:" as in namespaced_ident.
        result = Node.new(:ELEMENT_NAME, [val.first])
      
    result
end

def _reduce_34(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip])
      
    result
end

def _reduce_35(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_36(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_37(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_38(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_39(val, _values, result)
 result = [val.first, val.last] 
    result
end

def _reduce_40(val, _values, result)
 result = [val.first, val.last] 
    result
end

def _reduce_41(val, _values, result)
 result = [val.first, val.last] 
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
        if val[0] == 'even'
          val = ["2","n","+","0"]
          result = Node.new(:AN_PLUS_B, val)
        elsif val[0] == 'odd'
          val = ["2","n","+","1"]
          result = Node.new(:AN_PLUS_B, val)
        else
          # This is not CSS standard.  It allows us to support this:
          # assert_xpath("//a[foo(., @href)]", @parser.parse('a:foo(@href)'))
          # assert_xpath("//a[foo(., @a, b)]", @parser.parse('a:foo(@a, b)'))
          # assert_xpath("//a[foo(., a, 10)]", @parser.parse('a:foo(a, 10)'))
          result = val
        end
      
    result
end

def _reduce_45(val, _values, result)
        if val[1] == 'n'
          result = Node.new(:AN_PLUS_B, val)
        else
          raise Racc::ParseError, "parse error on IDENT '#{val[1]}'"
        end
      
    result
end

def _reduce_46(val, _values, result)
               # n+3, -n+3
        if val[0] == 'n'
          val.unshift("1")
          result = Node.new(:AN_PLUS_B, val)
        elsif val[0] == '-n'
          val[0] = 'n'
          val.unshift("-1")
          result = Node.new(:AN_PLUS_B, val)
        else
          raise Racc::ParseError, "parse error on IDENT '#{val[1]}'"
        end
      
    result
end

def _reduce_47(val, _values, result)
        if val[1] == 'n'
          val << "+"
          val << "0"
          result = Node.new(:AN_PLUS_B, val)
        else
          raise Racc::ParseError, "parse error on IDENT '#{val[1]}'"
        end
      
    result
end

def _reduce_48(val, _values, result)
        result = Node.new(:PSEUDO_CLASS, [val[1]])
      
    result
end

def _reduce_49(val, _values, result)
 result = Node.new(:PSEUDO_CLASS, [val[1]]) 
    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

def _reduce_53(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

def _reduce_54(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

def _reduce_55(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

def _reduce_60(val, _values, result)
 result = Node.new(:ID, val) 
    result
end

def _reduce_61(val, _values, result)
 result = [val.first, val[1]] 
    result
end

def _reduce_62(val, _values, result)
 result = [val.first, val[1]] 
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
 result = :equal 
    result
end

def _reduce_65(val, _values, result)
 result = :prefix_match 
    result
end

def _reduce_66(val, _values, result)
 result = :suffix_match 
    result
end

def _reduce_67(val, _values, result)
 result = :substring_match 
    result
end

def _reduce_68(val, _values, result)
 result = :not_equal 
    result
end

def _reduce_69(val, _values, result)
 result = :includes 
    result
end

def _reduce_70(val, _values, result)
 result = :dash_match 
    result
end

def _reduce_71(val, _values, result)
        result = Node.new(:NOT, [val[1]])
      
    result
end

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module CSS
  end   # module Nokogiri
